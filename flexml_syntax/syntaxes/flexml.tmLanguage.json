{
  "fileTypes": ["flexml"],
  "name": "Flexml File Format",
  "scopeName": "source.flexml",
  "patterns": [
    {
      "comment": "Initial pass: Only allow style declarations at the very beginning of the file.",
      "begin": "(^)",
      "end": "(?!\\G)",
      "patterns": [
        {
          "comment": "Match style aliases, allowing for multi-line definitions and leading whitespace.",
          "begin": "\\s*(\\{)\\s*([a-zA-Z0-9_-]+) *(?:=|\\s)*",
          "end": "\\}",
          "beginCaptures": {
            "1": { "name": "entity.name.tag.flexml" },
            "2": { "name": "entity.name" },
            "3": { "name": "punctuation.separator" }
          },
          "endCaptures": {
            "0": { "name": "entity.name.tag.flexml" }
          },
          "contentName": "meta.style.properties.flexml",
          "patterns": [
            {
              "comment": "Style properties like bold, italic:param, fontSize: 3",
              "match": "\\b([a-zA-Z0-9_+\\-]+)(?::\\s*([a-zA-Z0-9_+\\-.\\s]+))?\\b",
              "captures": {
                "1": { "name": "keyword.control" },
                "2": { "name": "constant.character" }
              }
            }
          ]
        },
        {
          "comment": "Once a non-style pattern is encountered, switch to the main content context.",
          "begin": "(?=[^\\s\\{])",
          "end": "(?!\\G)",
          "patterns": [
            { "include": "#main-content" }
          ]
        },
        {
          "comment": "Fallback for lines that might be empty or just whitespace at the top of the file",
          "match": "\\s+",
          "name": "comment.line.whitespace"
        }
      ]
    }
  ],
  "repository": {
    "main-content": {
      "patterns": [
        { "include": "#raw-container" },
        { "include": "#boxes-with-style" },
        { "include": "#boxes-without-style" },
        { "include": "#tags-container" },
        {
          "comment": "Catch all for plain text lines that aren't other elements",
          "match": "[^\\n\\[\\]{}<>|]+",
          "name": "string.unquoted.text-container.flexml"
        }
      ]
    },
    "raw-container": {
      "comment": "Matches raw strings: |= Anything goes in here and is |= =| not parsed. =|",
      "begin": "(?<!\\\\)\\|=\\s*",
      "end": "\\s*=\\|",
      "name": "string.quoted.raw.flexml",
      "patterns": [
        {
          "match": ".",
          "name": "string.unquoted.text-container.flexml"
        }
      ]
    },
    "boxes-with-style": {
      "comment": "Boxes with styles before content",
      "begin": "\\[([a-zA-Z0-9_\\-]+)",
      "beginCaptures": {
        "0": { "name": "entity.name.tag" },
        "1": { "name": "keyword.control" }
      },
      "end": "\\]",
      "endCaptures": {
        "0": { "name": "entity.name.tag" }
      },
      "contentName": "meta.box-content.with-style.flexml",
      "patterns": [
        {
          "comment": "Match style names",
          "match": "\\b[a-zA-Z0-9_\\-]+\\b",
          "name": "keyword.control"
        },
        {
          "comment": "Colon + style parameter",
          "match": ":\\s*([a-zA-Z0-9_+\\-.]+)",
          "captures": {
            "0": { "name": "punctuation.separator.colon.flexml" },
            "1": { "name": "constant.numeric.style-param.flexml" }
          }
        },
        {
          "comment": "Plus sign",
          "match": "\\+",
          "name": "punctuation.separator.plus.flexml"
        },
        {
          "comment": "Whitespace",
          "match": "\\s+",
          "name": "meta.whitespace.flexml"
        },
        {
          "comment": "Raw content inside the box",
          "include": "#raw-container"
        },
        {
          "comment": "Nested boxes (with style)",
          "include": "#boxes-with-style"
        },
        {
          "comment": "Nested boxes (without style)",
          "include": "#boxes-without-style"
        },
        {
          "comment": "Tags inside",
          "include": "#tags-container"
        },
        {
          "comment": "Plain text fallback inside box",
          "match": "[^\\[\\]\\+:]+",
          "name": "string.unquoted.box-text.flexml"
        }
      ]
    },
    "boxes-without-style": {
      "comment": "Matches boxes that start with content (allowing initial whitespace, e.g., [ Some text])",
      "begin": "\\[\\s*",
      "end": "\\]",
      "beginCaptures": {
        "0": { "name": "entity.name.tag" }
      },
      "endCaptures": {
        "0": { "name": "entity.name.tag" }
      },
      "contentName": "string.unquoted.box-content.flexml",
      "patterns": [
        { "include": "#raw-container" },
        { "include": "#tags-container" },
        { "include": "#boxes-with-style" },
        { "include": "#boxes-without-style" },
        {
          "match": "[^\\[\\]<>|{}]+",
          "name": "string.unquoted.box-text.flexml"
        }
      ]
    },
    "tags-container": {
      "comment": "Matches tags like <this_is_a-tag>",
      "match": "<[a-zA-Z0-9_\\-]+>",
      "name": "entity.name"
    }
  }
}
